scoreComposite(l_mixed)
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE){
mat_use = returner[[mat]]
return(0)
}
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
devtools::load_all(".")
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE){
mat_use = returner[[mat]]
return(0)
}
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
plot(1)
devtools::load_all(".")
visualizeReturner(r)
devtools::load_all(".")
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols == 2)){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper, ...)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols == 2)){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper, ...)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
#Test
mat = 'inst_mat'
type = 'score'
only_significant = FALSE
order = 'ranked'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols == 2)){
id_vec = apply(id_vec, 1, idStr)
}
returner = r
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols == 2)){
id_vec = apply(id_vec, 1, idStr)
}
id_vec
length(id_cols)
if (length(id_cols == 2)){
id_vec = apply(id_vec, 1, idStr)
}
length(id_cols == 2)
if (length(id_cols) == 2){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper, ...)
lower_indices = upper < 0
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
return(0)
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Test
mat = 'inst_mat'
type = 'score'
only_significant = FALSE
order = 'ranked'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols) == 2){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
visualizeReturner(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Test
# mat = 'inst_mat'
# type = 'score'
# only_significant = FALSE
# order = 'ranked'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols) == 2){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
visualizeReturner = function(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Test
# mat = 'inst_mat'
# type = 'score'
# only_significant = FALSE
# order = 'ranked'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols) == 2){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
visualizeReturner(r)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
visualizeReturner = function(returner, mat = 'inst_mat',
type = 'score', only_significant = FALSE,
order = 'ranked'){ #ranked, some other other order, 'sorted'
#Test
# mat = 'inst_mat'
# type = 'score'
# only_significant = FALSE
# order = 'ranked'
#Extract id colums for each option
if (mat == 'inst_mat'){
id_cols = 'inst'
}	 else if (mat == 'subset_mat_baseline'){
id_cols = 'subset'
} else if (mat == 'subset_mat_nobaseline'){
id_cols = 'subset'
} else if ( mat == 'inst_subset_mat_baseline'){
id_cols = c('inst', 'subset')
} else if (mat == 'inst_subset_mat_nobaseline'){
id_cols = c('inst', 'subset')
}
if (type == 'score'){
cols = c('score_est', 'score_lower', 'score_upper')
} else if (type == 'effect'){
cols = c('effect_est', 'effect_lower', 'effect_upper')
}
mat_use = returner[[mat]]
id_vec = mat_use[ ,id_cols]
if (length(id_cols) == 2){
id_vec = apply(id_vec, 1, idStr)
}
#ID vars
plot_vars = mat_use[ ,cols] #Subse these two variables
plot_names = id_vec
#Extract the variables we want
center = plot_vars[ ,1]
lower = plot_vars[ ,2]
upper = plot_vars[ ,3]
p = length(center)
x = 1:p
graphics::plot(center, ylim = c(min(lower), max(upper)))
graphics::segments(x0=x, x1=x,y0 = lower, y1 = upper)
lower_indices = upper < 0
upper_indices = lower > 0
graphics::segments(x0=x[lower_indices], x1=x[lower_indices],
y0 = lower[lower_indices], y1 = upper[lower_indices], lwd = 3, col = 'red')
graphics::segments(x0=x[upper_indices], x1=x[upper_indices],
y0 = lower[upper_indices], y1 = upper[upper_indices], lwd = 3, col = 'blue')
graphics::abline(h = 0, lty = 3)
#Order and subset? if necesasary
#Here is where we would extrreact only_significatnt
return(0)
}
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r)
devtools::load_all(".")
visualizeReturner(r)
visualizeReturner(r)
visualizeReturner(r, plot_oder = 'ranked')
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
visualizeReturner()
visualizeReturner
devtools::load_all(".")
#TEst
data('neonatal')
m = neonatal[ ,c('outcome1', 'instid',
'male', 'csect', 'outborn',
'cont1', 'cont2')]
r = fitBabyMonitor(m, 3, 0)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
center
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
devtools::load_all(".")
plotRankingLines(r$inst_mat$score_est, r$inst_mat$score_lower, r$inst_mat$score_upper)
visualizeReturner(r, plot_order = 'ranked')
