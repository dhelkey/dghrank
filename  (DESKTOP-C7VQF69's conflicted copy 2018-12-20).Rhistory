visualizeReturner(L_effect_scaled[[i]])
outcome
outcomes_vec
##First, we need diagrams (in same order w/ 3 score types + histogram) for lets say breastmilk
i = 9
outcome = outcomes_vec[i]
visualizeReturner(L_effect_scaled[[i]])
outcome
##First, we need diagrams (in same order w/ 3 score types + histogram) for lets say breastmilk
i = 9
j = 1
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
visualizeReturner(r)
##First, we need diagrams (in same order w/ 3 score types + histogram) for lets say breastmilk
i = 9
j = 2
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
visualizeReturner(r)
##First, we need diagrams (in same order w/ 3 score types + histogram) for lets say breastmilk
i = 9
j = 3
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
visualizeReturner(r)
hist(r$inst_mat$score_est)
par(mfrow = c(1, 2))
visualizeReturner(r)
hist(r$inst_mat$score_est)
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
title_str = c('Indicator: ', outcomes_vec[i], '\n Score Type:', score_types[j])
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
title_str = c('Indicator: ', outcomes_vec[i], '\n Score Type:', score_types[j])
score_types = c('effect_scaled', 'stat_z', 'stat_z_scaled')
##First, we need diagrams (in same order w/ 3 score types + histogram) for lets say breastmilk
i = 9
j = 3
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
title_str = c('Indicator: ', outcomes_vec[i], '\n Score Type:', score_types[j])
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
?png
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
title_str = paste0('Indicator: ', outcomes_vec[i],
'Score Type:', score_types[j])
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
title_str = paste0('Indicator: ', outcomes_vec[i],
'n Score Type:', score_types[j])
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
L_list = list(L_effect_scaled, L_stat_z, L_stat_z_scaled)
#Extract
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
title_str = paste0('Indicator: ', outcomes_vec[i],
'\n Score Type:', score_types[j])
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est)
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type)
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Indicator: ', outcome,
'\n Score Type:', score_type)
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type)
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'institution')
title(title_str)
devtools::load_all(".")
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'institution')
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type)
visualizeReturner(r, xlab = 'institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type)
devtools::load_all(".")
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type)
mtext(side = 1, line = 2, 'Frequency')
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
#Plot for each score type, and also effect....
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
for (j in 1:3){
par(mfrow = c(1, 2))
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h)
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
}
#Graphics settings
png_h = png_w = 1200
pointsize = 18
#Plot for each score type, and also effect....
for (j in 1:3){
par(mfrow = c(1, 2))
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h,
pointsize = pointsize)
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
}
#Plot for each score type, and also effect....
for (j in 1:3){
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h,
pointsize = pointsize)
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
}
#Graphics settings
png_w = 1280
png_h = 800
pointsize = 18
for (j in 1:3){
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h,
pointsize = pointsize)
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
}
for (j in 1:3){
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
outcome =  outcomes_vec[i]
score_type = score_types[j]
title_str = paste0('Score Type:', score_type,
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h,
pointsize = pointsize)
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type)
title(title_str)
hist(r$inst_mat$score_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
}
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
outcome =  outcomes_vec[i]
score_type = 'effect'
title_str = paste0('Effect Scores',
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type, type = 'effect')
title(title_str)
hist(r$inst_mat$effect_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
outcome = outcomes_vec[i]
r = L_list[[j]][[i]]
outcome =  outcomes_vec[i]
score_type = 'effect'
title_str = paste0('Effect Scores',
'\n Indicator: ', outcome)
save_str = paste0('dist_hist_',outcome,'_',score_type,'.png')
png(file.path(out_path,save_str), width = png_w, height = png_h,
pointsize = pointsize)
par(mfrow = c(1, 2))
visualizeReturner(r, xlab = 'Institution', ylab = score_type, type = 'effect')
title(title_str)
hist(r$inst_mat$effect_est, main = '', xlab = score_type, ylab = '')
mtext(side = 2, line = 2, 'Frequency')
dev.off()
a
a_effect_scaled = scoreComposite(L_effect_scaled)
a_stat_z = scoreComposite(L_stat_z)
a_stat_z_scaled = scoreComposite(L_stat_z_scaled)
composite_scores = data.frame('effect_scaled', a_effect_scaled$inst_mat$score_est,
'stat_z', a_stat_z$inst_mat$score_est,
'stat_z_scaled', a_stat_z_scaled$inst_mat$score_est)
pairs(composite_scores)
head(composite_scores)
a_effect_scaled$inst_mat$score_est
composite_scores = data.frame('effect_scaled'= a_effect_scaled$inst_mat$score_est,
'stat_z'=a_stat_z$inst_mat$score_est,
'stat_z_scaled'= a_stat_z_scaled$inst_mat$score_est)
pairs(composite_scores)
?pairs r
edit(pairs)
cor(composite_scores)
tab
tab = a_list[[j]]$inst_mat
n = dim(tab)[1]
a_list = list(a_effect_scaled, a_stat_z, a_stat_z_scaled)
tab = a_list[[j]]$inst_mat
n = dim(tab)[1]
n_low = sum(tab$score_upper < 0)
n_low
n_high = sum(tab$score_lower > 0)
n_high
count_table = matrix(0, nrow = 3, ncol = 3) #cols....low, normal, high
for (j in 1:3){
tab = a_list[[j]]$inst_mat
n = dim(tab)[1]
n_low = sum(tab$score_upper < 0)
n_high = sum(tab$score_lower > 0)
n_normal = n - n_low - n_high
count_table[j, ] = c(n_low, n_normal, n_high)
}
count_table
library(xtable)
##R code to make all figures
library(xtable)
rownames(count_table) = score_types
rownames(count_table) = score_types
colnames(count_table) = c('Low', 'Normal', 'High')
count_table
xtable(count_table)
?xtable
tab_1_code = xtable(count_table, digits = 0)
xtable(count_table, digits = 0)
##Other plot too
i = 9
j = 1
r = L_list[[j]][[i]]
plot(r$inst_mat$n, r$inst_mat$effect_est)
plot(r$inst_mat$n, r$inst_mat$est_stat_z)
##Find an extreme version lol
i = 9
j = 2
r = L_list[[j]][[i]]
visualizeReturner(r)
##Find an extreme version lol
i = 5
j = 2
r = L_list[[j]][[i]]
visualizeReturner(r)
r$inst_mat
r$dat$o_overall
head(r$inst_mat[r$inst_mat$stat_z < 9, ])
r$inst_mat[r$inst_mat$stat_z < -9, ])
r$inst_mat[r$inst_mat$stat_z < -9, ]
r$dat$indicator_name
r$dat$o_overall
qt
system.file('data-raw', package = 'dghrank')
system.file(package = 'dghrank')
system.file(package = 'dghrank', 'data-raw')
context('scoreComposite')
data_path = file.path(system.file(package = 'dghrank'),'data-raw')
#parameters
vars = c('score_est','score_se', 'score_lower', 'score_upper')
#Load data
load(file.path(data_path, 'minimal_data_sub'))
n_cat_vec = c(0, 0, 5,5,6,3,6,5,4)
n_cont_vec = c(0,0, 2,3,3,3,3,2,3)
q = length(minimal_data_sub)
L  = L2 = list()
#Fit w/ and w/o subset
for (i in 1:q){
L[[i]] = fitBabyMonitor(minimal_data_sub[[i]], n_cat_vec[i], n_cont_vec[i], subset = TRUE)
L2[[i]] = fitBabyMonitor(minimal_data_sub[[i]][ ,-3], n_cat_vec[i], n_cont_vec[i], subset = FALSE)
print(i)
}
#Fit composite scores
a = scoreComposite(L)
a2 = scoreComposite(L2)
#Visual rtests
# i = 4
# r = l[[i]]
# b = plotRankingLines(r$inst_mat$effect_est, r$inst_mat$effect_lower, r$inst_mat$effect_upper)
# plotRankingLines(a$inst_mat$score_est, a$inst_mat$score_lower, a$inst_mat$score_upper, order = b$order)
#
# b = plotRankingLines(r$subset_mat_baseline$score_est, r$subset_mat_baseline$score_lower, r$subset_mat_baseline$score_upper)
# plotRankingLines(a$subset_mat_baseline$score_est, a$subset_mat_baseline$score_lower, a$subset_mat_baseline$score_upper, order = b$order)
#
# b = plotRankingLines(r$inst_subset_mat_baseline$score_est, r$inst_subset_mat_baseline$score_lower, r$inst_subset_mat_baseline$score_upper)
# plotRankingLines(a$inst_subset_mat_baseline$score_est, a$inst_subset_mat_baseline$score_lower, a$inst_subset_mat_baseline$score_upper,
#                  order = b$order)
##First, run some tests using the same results...
test_that('runs fine w/ replications of the same outcome', {
i = 3
r = fitBabyMonitor(minimal_data_sub[[i]], n_cat_vec[i], n_cont_vec[i], subset = TRUE)
l2 = list(r,r)
a2 = scoreComposite(l2)
l3 = list(r,r,r)
a3 = scoreComposite(l3)
#Test expectations...
expect_equal(a2$inst_mat$score_est,sqrt(2) * r$inst_mat$score_est)
expect_equal(a2$subset_mat_baseline$score_est, sqrt(2) * r$subset_mat_baseline$score_est)
expect_equal(a2$subset_mat_nobaseline$score_est, sqrt(2) * r$subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_nobaseline$score_est, sqrt(2) * r$inst_subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_baseline$score_est, sqrt(2) * r$inst_subset_mat_baseline$score_est)
#Make sure the things that should be zero are zero
all(a2$inst_subset_mat_baseline[a2$inst_subset_mat_baseline$subset == 1, vars] == 0)
all(a3$inst_subset_mat_baseline[a3$inst_subset_mat_baseline$subset == 1, vars] == 0)
#Test standard errors
expect_equal(a2$inst_mat$score_se,  sqrt( r$inst_mat$score_se^2) )
expect_equal(a2$subset_mat_baseline$score_se,  sqrt( r$subset_mat_baseline$score_se^2) )
expect_equal(a2$subset_mat_nobaseline$score_se,  sqrt( r$subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_nobaseline$score_se,  sqrt( r$inst_subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_baseline$score_se,  sqrt( r$inst_subset_mat_baseline$score_se^2) )
})
test_that('baseline components are all 0 for subset == 1', {
expect_true(all(a$subset_mat_baseline[a$subset_mat_baseline$subset == 1, vars]  == 0))
expect_true(all(a$inst_subset_mat_baseline[a$inst_subset_mat_baseline$subset == 1, vars]  == 0))
})
test_that('Make sure it works without subset present', {
expect_equal(a$inst_mat, a2$inst_mat, tolerance = 0.02)
})
devtools::load_all(".")
data_path = file.path(system.file(package = 'dghrank'),'data-raw')
#parameters
vars = c('score_est','score_se', 'score_lower', 'score_upper')
#Load data
load(file.path(data_path, 'minimal_data_sub'))
n_cat_vec = c(0, 0, 5,5,6,3,6,5,4)
n_cont_vec = c(0,0, 2,3,3,3,3,2,3)
q = length(minimal_data_sub)
L  = L2 = list()
#Fit w/ and w/o subset
for (i in 1:q){
L[[i]] = fitBabyMonitor(minimal_data_sub[[i]], n_cat_vec[i], n_cont_vec[i], subset = TRUE)
L2[[i]] = fitBabyMonitor(minimal_data_sub[[i]][ ,-3], n_cat_vec[i], n_cont_vec[i], subset = FALSE)
print(i)
}
#Fit composite scores
a = scoreComposite(L)
a2 = scoreComposite(L2)
#Visual rtests
# i = 4
# r = l[[i]]
# b = plotRankingLines(r$inst_mat$effect_est, r$inst_mat$effect_lower, r$inst_mat$effect_upper)
# plotRankingLines(a$inst_mat$score_est, a$inst_mat$score_lower, a$inst_mat$score_upper, order = b$order)
#
# b = plotRankingLines(r$subset_mat_baseline$score_est, r$subset_mat_baseline$score_lower, r$subset_mat_baseline$score_upper)
# plotRankingLines(a$subset_mat_baseline$score_est, a$subset_mat_baseline$score_lower, a$subset_mat_baseline$score_upper, order = b$order)
#
# b = plotRankingLines(r$inst_subset_mat_baseline$score_est, r$inst_subset_mat_baseline$score_lower, r$inst_subset_mat_baseline$score_upper)
# plotRankingLines(a$inst_subset_mat_baseline$score_est, a$inst_subset_mat_baseline$score_lower, a$inst_subset_mat_baseline$score_upper,
#                  order = b$order)
##First, run some tests using the same results...
test_that('runs fine w/ replications of the same outcome', {
i = 3
r = fitBabyMonitor(minimal_data_sub[[i]], n_cat_vec[i], n_cont_vec[i], subset = TRUE)
l2 = list(r,r)
a2 = scoreComposite(l2)
l3 = list(r,r,r)
a3 = scoreComposite(l3)
#Test expectations...
expect_equal(a2$inst_mat$score_est,sqrt(2) * r$inst_mat$score_est)
expect_equal(a2$subset_mat_baseline$score_est, sqrt(2) * r$subset_mat_baseline$score_est)
expect_equal(a2$subset_mat_nobaseline$score_est, sqrt(2) * r$subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_nobaseline$score_est, sqrt(2) * r$inst_subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_baseline$score_est, sqrt(2) * r$inst_subset_mat_baseline$score_est)
#Make sure the things that should be zero are zero
all(a2$inst_subset_mat_baseline[a2$inst_subset_mat_baseline$subset == 1, vars] == 0)
all(a3$inst_subset_mat_baseline[a3$inst_subset_mat_baseline$subset == 1, vars] == 0)
#Test standard errors
expect_equal(a2$inst_mat$score_se,  sqrt( r$inst_mat$score_se^2) )
expect_equal(a2$subset_mat_baseline$score_se,  sqrt( r$subset_mat_baseline$score_se^2) )
expect_equal(a2$subset_mat_nobaseline$score_se,  sqrt( r$subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_nobaseline$score_se,  sqrt( r$inst_subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_baseline$score_se,  sqrt( r$inst_subset_mat_baseline$score_se^2) )
})
test_that('baseline components are all 0 for subset == 1', {
expect_true(all(a$subset_mat_baseline[a$subset_mat_baseline$subset == 1, vars]  == 0))
expect_true(all(a$inst_subset_mat_baseline[a$inst_subset_mat_baseline$subset == 1, vars]  == 0))
})
test_that('Make sure it works without subset present', {
expect_equal(a$inst_mat, a2$inst_mat, tolerance = 0.02)
})
library(testthat)
#Fit composite scores
a = scoreComposite(L)
a2 = scoreComposite(L2)
#Visual rtests
# i = 4
# r = l[[i]]
# b = plotRankingLines(r$inst_mat$effect_est, r$inst_mat$effect_lower, r$inst_mat$effect_upper)
# plotRankingLines(a$inst_mat$score_est, a$inst_mat$score_lower, a$inst_mat$score_upper, order = b$order)
#
# b = plotRankingLines(r$subset_mat_baseline$score_est, r$subset_mat_baseline$score_lower, r$subset_mat_baseline$score_upper)
# plotRankingLines(a$subset_mat_baseline$score_est, a$subset_mat_baseline$score_lower, a$subset_mat_baseline$score_upper, order = b$order)
#
# b = plotRankingLines(r$inst_subset_mat_baseline$score_est, r$inst_subset_mat_baseline$score_lower, r$inst_subset_mat_baseline$score_upper)
# plotRankingLines(a$inst_subset_mat_baseline$score_est, a$inst_subset_mat_baseline$score_lower, a$inst_subset_mat_baseline$score_upper,
#                  order = b$order)
##First, run some tests using the same results...
test_that('runs fine w/ replications of the same outcome', {
i = 3
r = fitBabyMonitor(minimal_data_sub[[i]], n_cat_vec[i], n_cont_vec[i], subset = TRUE)
l2 = list(r,r)
a2 = scoreComposite(l2)
l3 = list(r,r,r)
a3 = scoreComposite(l3)
#Test expectations...
expect_equal(a2$inst_mat$score_est,sqrt(2) * r$inst_mat$score_est)
expect_equal(a2$subset_mat_baseline$score_est, sqrt(2) * r$subset_mat_baseline$score_est)
expect_equal(a2$subset_mat_nobaseline$score_est, sqrt(2) * r$subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_nobaseline$score_est, sqrt(2) * r$inst_subset_mat_nobaseline$score_est)
expect_equal(a2$inst_subset_mat_baseline$score_est, sqrt(2) * r$inst_subset_mat_baseline$score_est)
#Make sure the things that should be zero are zero
all(a2$inst_subset_mat_baseline[a2$inst_subset_mat_baseline$subset == 1, vars] == 0)
all(a3$inst_subset_mat_baseline[a3$inst_subset_mat_baseline$subset == 1, vars] == 0)
#Test standard errors
expect_equal(a2$inst_mat$score_se,  sqrt( r$inst_mat$score_se^2) )
expect_equal(a2$subset_mat_baseline$score_se,  sqrt( r$subset_mat_baseline$score_se^2) )
expect_equal(a2$subset_mat_nobaseline$score_se,  sqrt( r$subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_nobaseline$score_se,  sqrt( r$inst_subset_mat_nobaseline$score_se^2) )
expect_equal(a2$inst_subset_mat_baseline$score_se,  sqrt( r$inst_subset_mat_baseline$score_se^2) )
})
test_that('baseline components are all 0 for subset == 1', {
expect_true(all(a$subset_mat_baseline[a$subset_mat_baseline$subset == 1, vars]  == 0))
expect_true(all(a$inst_subset_mat_baseline[a$inst_subset_mat_baseline$subset == 1, vars]  == 0))
})
test_that('Make sure it works without subset present', {
expect_equal(a$inst_mat, a2$inst_mat, tolerance = 0.02)
})
context('scoreComposite')
data_path = file.path(system.file(package = 'dghrank'),'data-raw')
#parameters
vars = c('score_est','score_se', 'score_lower', 'score_upper')
#Load data
load(file.path(data_path, 'minimal_data_sub'))
n_cat_vec = c(0, 0, 5,5,6,3,6,5,4)
n_cont_vec = c(0,0, 2,3,3,3,3,2,3)
q = length(minimal_data_sub)
L  = L2 = list()
names(minimal_data_sub)
head(minimal_data_sub$ante)
table(minimal_data_sub$ante$ante)
